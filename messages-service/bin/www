#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config()

const app = require('../app');
const debug = require('debug')('messages-service:server');
const http = require('http');
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST']
  }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on("connection", (socket) => {
  console.log("A client connected:", socket.id);

  // รับข้อความจาก client
  socket.on("message", (data) => {
      console.log("Received from client:", data);

      // ส่งข้อความกลับไปยัง client เฉพาะ client นั้นๆ
      // socket.emit("reply", `Server: ${data}`);
      io.emit("message", data)
  });

  socket.on("customerMessage", (data) => {
      console.log("Received from client:", data);

      // ส่งข้อความกลับไปยัง client เฉพาะ client นั้นๆ
      // socket.emit("reply", `Server: ${data}`);
      io.emit("customerMessage", data)
  });

  socket.on("createQRCode", (data) => {
      console.log("Create qrcode from client:", data);

      // ส่งข้อความกลับไปยัง client เฉพาะ client นั้นๆ
      // socket.emit("reply", `Server: ${data}`);
      io.emit("createQRCode", data)
  });

  socket.on("printerMessage", (data) => {
    io.emit("printerMessage", data) // send to every one all client
  })

  socket.on("disconnect", () => {
      console.log("Client disconnected:", socket.id);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
